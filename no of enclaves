class Solution {
public:
    void dfs(int i, int j,vector<vector<int>>& grid,vector<vector<int>>& vis){
        vis[i][j]=1;
        vector<int> delrow={0,1,0,-1};
        vector<int> delcol={-1,0,1,0};
        int n=grid.size();
        int m=grid[0].size();
        for (int k=0;k<4;k++){
            int nrow=i+delrow[k];
            int ncol=j+delcol[k];
            if (nrow>=0 && ncol>=0 && nrow<n && ncol<m && !(vis[nrow][ncol]) && (grid[nrow][ncol]==1)){
                dfs(nrow,ncol,grid,vis);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m));
        int ans=0;
        for(int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (!vis[i][j]  && (grid[i][j]==1) && i==0){
                    dfs(i,j,grid,vis);
                }
                else if (!vis[i][j] && (grid[i][j]==1) && j==0 ){
                    dfs(i,j,grid,vis);
                }
                else if (!vis[i][j]  && (grid[i][j]==1) && i==n-1){
                    dfs(i,j,grid,vis);
                }
                else if (!vis[i][j]  && (grid[i][j]==1) && j==m-1){
                    dfs(i,j,grid,vis);
                }
            }
        }
        for(int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (grid[i][j]==1 && i>0 && j>0 && i<n-1 && j<m-1 && !(vis[i][j])){
                    ans++;
                }
            }
        }
        return ans;
    }
};
