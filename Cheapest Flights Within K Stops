class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adj(n);
        for (auto it:flights){
            int u=it[0];
            int v=it[1];
            int cost=it[2];
            adj[u].push_back({v,cost});
            //adj[v].push_back({u,cost});    
        }
        vector<int> dist(n,INT_MAX);
        dist[src]=0;
        queue<pair<int,pair<int,int>>> Q;
        Q.push({0,{src,0}});
        while(!Q.empty()){
            auto it=Q.front();
            int stops=it.first;
            int node=it.second.first;
            int cost=it.second.second;
            Q.pop();
            if(stops>k) continue;
            for (auto it2:adj[node]){
                int nbd=it2.first;
                int nwt=it2.second;
                if(cost+nwt<dist[nbd] && stops<=k){
                    dist[nbd]=cost+nwt;
                    Q.push({stops+1,{nbd,cost+nwt}});
                }
            }
        }
        if(dist[dst]==INT_MAX) return -1;
        return dist[dst];
        
    }
};
