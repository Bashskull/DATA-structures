// User function Template for C++
class Solution {
  public:
    void dfs(int node,vector<vector<pair<int,int>>>& adj,stack<int>& st,vector<int>& vis){
        vis[node]=1;
        for(auto it:adj[node]){
            int nbd=it.first;
            if(!vis[nbd]){
                dfs(nbd,adj,st,vis);
            }
        }
        st.push(node);
    }
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
        // code here
        stack <int> st;
        int start=0;
        vector<int> vis(V);
        vector<vector<pair<int,int>>> adj(V);
        for (auto it:edges){
            int u=it[0];
            int v=it[1];
            int wt=it[2];
            adj[u].push_back({v,wt});
            //adj[v].push_back({u,wt});
        }
        for (int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i,adj,st,vis);
            }
        }
        vector<int> dist(V,INT_MAX);
        dist[0]=0;
        while(!st.empty()){
            int node=st.top();
            st.pop();
            for(auto  it:adj[node]){
                int nbd=it.first;
                int wt=it.second;
                if(dist[node]!=INT_MAX){
                    if(dist[nbd]>wt+dist[node]){
                        dist[nbd]=wt+dist[node];
                    }                    
                }   
            }
        }
        for (int i=0;i<V;i++){
            if(dist[i]>=INT_MAX){
                dist[i]=-1;
            }
        }
        return dist;
        
    }
};
