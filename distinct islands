// User function Template for C++

class Solution {
  public:
    vector<pair<int,int>> bfs(int row,int col,vector<vector<int>>& vis,vector<vector<int>>& grid){
        vector<pair<int,int>> shotgun;
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>> Q;
        Q.push({row,col});
        vector<int> delrow={1,0,-1,0};
        vector<int> delcol={0,1,0,-1};
        while(!Q.empty()){
            int r=Q.front().first;
            int c=Q.front().second;
            Q.pop();
            shotgun.push_back({r,c});
            for (int i=0;i<4;i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if (nrow>=0 && ncol>=0 && nrow<n && ncol<m && grid[nrow][ncol]==1 && !vis[nrow][ncol]){
                    Q.push({nrow,ncol});
                    vis[nrow][ncol]=1;
                }
                
            }
        }
        return shotgun;
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m));
        set<vector<pair<int,int>>> ans;
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    vector<pair<int,int>> mini=bfs(i,j,vis,grid);
                    int m=mini.size();
                    for (int k=0;k<m;k++){
                        mini[k].first=mini[k].first-i;
                        mini[k].second=mini[k].second-j;
                    }
                    ans.insert(mini);
                }
            }
        }
        return ans.size();
        
        
        
        
        
        
        
        
        
    }
};
