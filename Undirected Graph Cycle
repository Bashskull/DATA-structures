class Solution {
  public:
    bool dfs(int node,int parent,vector<int>& vis,vector<vector<int>>& adj){
        vis[node]=1;
        for (auto it:adj[node]){
            if (!vis[it]){
                if(dfs(it,node,vis,adj)){
                    return true;
                }
            }
            else if(it!=parent){
                    return true;
                } 
            }
        return false;

    }
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<vector<int>> adj(V);
        for (auto it:edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);            
        }
        vector<int> vis(V);
        //int start=0;
        //vis[0]=1;
        //int parent=-1;
        for (int i=0;i<V;i++){
            if (!vis[i]){
                if (dfs(i,-1,vis,adj)){
                    return true;
                }      
            }
        }
        return false;
    }
};
