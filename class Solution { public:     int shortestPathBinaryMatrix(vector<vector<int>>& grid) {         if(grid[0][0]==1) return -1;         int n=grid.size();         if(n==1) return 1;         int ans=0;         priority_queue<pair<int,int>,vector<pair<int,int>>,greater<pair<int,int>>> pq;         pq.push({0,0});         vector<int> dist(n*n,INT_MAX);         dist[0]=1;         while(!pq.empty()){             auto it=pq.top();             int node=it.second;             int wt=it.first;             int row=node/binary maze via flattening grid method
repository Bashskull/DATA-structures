class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0]==1) return -1;
        int n=grid.size();
        if(n==1) return 1;
        int ans=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,0});
        vector<int> dist(n*n,INT_MAX);
        dist[0]=1;
        while(!pq.empty()){
            auto it=pq.top();
            int node=it.second;
            int wt=it.first;
            int row=node/n;
            int col=node%n;
            pq.pop();
            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){
                    int nrow=row+i;
                    int ncol=col+j;
                    if(nrow>=0 && ncol>=0 && nrow<n && ncol<n && grid[nrow][ncol]==0){
                        int nnode=nrow*n+ncol;
                        if(dist[nnode]>wt+1){
                            dist[nnode]=wt+1;
                            pq.push({wt+1,nnode});
                        }

                    }
                }
            }
        }

        if(dist[n*n-1]==INT_MAX) return -1;
        return dist[n*n-1]+1;
    }
};
