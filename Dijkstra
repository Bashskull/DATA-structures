// User Function Template
class Solution {
  public:
    vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
        // Code here
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<vector<pair<int,int>>> adj(V);
        for (auto it:edges){
            int u=it[0];
            int v=it[1];
            int wt=it[2];
            adj[u].push_back({v,wt});
            adj[v].push_back({u,wt});
        }
        vector<int> dist(V,INT_MAX);
        dist[src]=0;
        pq.push({0,src});
        while(!pq.empty()){
            auto it=pq.top();
            int wt=it.first;
            int node=it.second;
            pq.pop();
            for (auto it2:adj[node]){
                int nnode=it2.first;
                int nwt=it2.second;
                if(dist[nnode]>nwt+wt){
                    dist[nnode]=nwt+wt;
                    pq.push({nwt+wt,nnode});
                }
            }
        }
        return dist;
    }
};
