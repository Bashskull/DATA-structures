class DSU {
    vector<int> rank,parent,size;
public:
    DSU(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for (int i=0;i<=n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    int findupar(int node){
        if (node==parent[node]){
            return node;
        }
        return parent[node]=findupar(parent[node]);
    }
    void unionr(int u, int v){
        int upar=findupar(u);
        int vpar=findupar(v);
        if(upar==vpar) return; 
        if (rank[upar]>rank[vpar]){
            parent[vpar]=upar;
        }
        else if(rank[upar]<rank[vpar]){
            parent[upar]=vpar;
        }
        else{
            parent[vpar]=upar;
            rank[upar]++;            
        }
    }
        void unions(int u, int v){
        int uparu=findupar(u);
        int uparv=findupar(v);
        if(uparu==uparv) return;
        if (size[uparu]<size[uparv]){
            parent[uparu]=uparv;
            size[uparv]+=size[uparu];
        }
        else if(size[uparu]>size[uparv]){
            parent[uparv]=uparu;
            size[uparu]+=size[uparv];            
        }
        else{
            parent[uparu]=uparv;
            size[uparv]+=size[uparu];            
        }
    }
};
