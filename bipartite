class Solution {
public:
    bool dfs_extend(int start,int rang,vector<int>& color,vector<int>& vis,vector<vector<int>>& graph){
        vis[start]=1;
        color[start]=(rang);
        for (auto it:graph[start]){
            if (!vis[it] && color[it]==-1){
                if(!dfs_extend(it,!(color[start]),color,vis,graph)) {
                    return false;
                }
            }
            else if (vis[it] && color[it]==rang){
                return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int startcolor=0;
        int n=graph.size();
        vector<int> color(n,-1);
        vector<int> vis(n);
        for (int i=0;i<n;i++){
            if (!vis[i]){
                if (!dfs_extend(i,startcolor,color,vis,graph)) return false;
            }
        }
        return true;
    }
};
