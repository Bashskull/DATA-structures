class Solution {
public:
    void bfs(int noder,vector<vector<int>>& adj,vector<int>& vis){
        queue<int> Q;
        Q.push(noder);
        while (!Q.empty()){
            int node=Q.front();
            Q.pop();
            for (auto it:adj[node]){
                if (!vis[it]){
                    vis[it]=1;
                    Q.push(it);

                }
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();       
        vector<vector<int>> adj(isConnected.size()+1);
        for (int i=0;i<isConnected.size();i++){
            for (int j=i+1;j<isConnected[0].size();j++){
                if (isConnected[i][j]==1){
                    adj[i+1].push_back(j+1);
                    adj[j+1].push_back(i+1);
                }
            }
        }
        vector<int> vis(n+1);
        int count=0;
        for (int i=1;i<n+1;i++){
            if (!vis[i]){
                bfs(i,adj,vis);
                count++;
            }
        }
        return count;
    }
};
