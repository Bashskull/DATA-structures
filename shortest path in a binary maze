class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0]==1) return -1;
        int n=grid.size();
        if(n==1) return 1;
        int ans=0;
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
        pq.push({0,{0,0}});
        vector<vector<int>> dist(n,vector<int>(n,INT_MAX));
        while(!pq.empty()){
            auto it=pq.top();
            int wt=it.first;
            int u=it.second.first;
            int v=it.second.second;
            pq.pop();
            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){
                    int row=u+i;
                    int col=v+j;
                    if(row>=0 && col>=0 && row<n && col<n && grid[row][col]==0){
                        if(dist[row][col]>wt+1){
                            dist[row][col]=wt+1;
                            pq.push({wt+1,{row,col}});
                        }
                    }
                }
            }
        }
            if(dist[n-1][n-1]==INT_MAX) return -1;
            return dist[n-1][n-1]+1;
    }
};
